
              OTPasswd - One-Time Password Authentication System
              --------------------------------------------------
                https://savannah.nongnu.org/projects/otpasswd
                        Updated: 02-Jan-10 (v0.5pre1)

                                    README



Contents
========
  0. Package Status
  1. Introduction
  2. Package Features
  3. Security Advisory
  4. Installation
  5. Demo (Screenshot!)
  6. Contact Information
  7. History
  8. Licensing



0. Package Status
=================
OTPasswd is under development.  In the ChangeLog there's a list of things
I'd like to implement before publishing the package as version 1.0.  Most
features currently work (as of v0.3) but, of course, testing is still
required.  Think of this as beta software.

It is a goal of OTPasswd development to create a source package which can
readily be compiled on a variety of *nix platforms, including Linux, BSD,
Mac OSX, and Solaris.  In addition, it is hoped that pre-compiled binary
packages can be maintained for major Linux distributions, as well as a
Gentoo ebuild.

View the most recent version of this document on the web at:
http://git.savannah.gnu.org/cgit/otpasswd.git/plain/README



1. Introduction
===============
A one-time password (OTP) is a password that is only valid for a single login
session or transaction (normally used along with a normal static password).
Using an OTP reduces the risks associated with logging into your system
from insecure (eg, key logged) workstations.

The OTPasswd package consists of two primary components, a user utility
and a PAM module (Pluggable Authentication Module).  The utility allows the
management of a user's interaction with the OTPasswd system.  Its primary
functions are to generate the user's cryptographic key, manage options
affecting OTPasswd behavior, and to print passcards with one-time passwords.
The user's OTPasswd configuration is known as the user's "state", and can
either be stored in the user's home directory or in a system-wide database.

The second primary component of the OTPasswd system, the PAM module, enables
"PAM aware" applications, such as OpenSSH, to do OTP authentications using
the user's OTPasswd "state" information.

OTPasswd is written in C (C99) and implements an OTP system as described
by Steve Gibson's "Perfect Paper Passwords" specification.  An excellent
description may be found at: <https://www.grc.com/ppp.htm>.  While OTPasswd
is designed to be completely compliant with the PPPv3.1 specification,
it does optionally extend the specification by allowing the use of a
cryptographic "salt" to the passcode counter.  OTPasswd does not support
earlier versions of the PPP specification.



2. Package Features
===================
Current:
   * Use of Pluggable Authentication Module (PAM) allows great flexibility
   * Rijndael (AES) cipher is modern, robust, and efficient
   * User state information may be maintained in global DB, or in user home
   * Compatible with the well-documented PPP (Perfect Paper Passwords) standard
   * Interoperable with other PPP-compliant applications
   * Capable of enforcing system OTP security policy decisions
   * User-selectable passcode entry alphabet to suit language, or keyboard
   * High entropy passcodes for rapid entry, reducing Over-The-Shoulder attacks
   * Passcards may be generated in either plain ASCII or LaTeX
   * Secure locking of state files to resolve race conditions
   * Many user options: display entered passcodes, passcode length, etc.
   * Many sysadmin options: enforcement or overriding user options, etc.
   * Warnings issued when user passcard supply is running low
   * Support for cryptographic salt to increase attack resistance (optional)
   * Designed and written with emphasis on secure code

Planned:
   * Out-of-band passcode transmission with customizable scripts (SMS, IM, etc)
   * Wide variety of supported platforms (Linux, Unix, BSD, Solaris)
   * Comprehensive documentation
   * Pre-compiled binary packages for major distributions; Also, Gentoo ebuild
   * Flexible layout of printed passcards through customizable scripts
   * Flexible choice of DB backend, including flat file, MySQL & LDAP



3. Security Advisory
====================
It is very important that the user has a good understanding of the following
issues related to any system security software:

   A.  The intent and purpose of the design
   B.  The limitations of the implementation
   C.  The points of vulnerability
   D.  The general principles of operation

The user is encouraged to read the documentation provided in the <docs>
directory of this package.  In particular, the <docs/security> document
covers a number of security concerns related to this package.  The user
is also encouraged to read the information on the GRC website (above)
regarding PPP.

The user is also advised to take the following two warnings to heart:

   CAUTION #1.  OTPasswd is NOT designed to replace standard system
   passwords, rather, it is intended to provide a "second factor" to
   a "first factor" authentication system.  Do not use it as your only
   authentication system.  Really.

   CAUTION #2.  No OTP authentication system can protect you if you have not
   first authenticated the endpoint of your communication channel.  Prior
   to providing your password, it is essential to authenticate the host.
   Failure to do so exposes you to the risk of a Man-In-The-Middle attack.
   In other words: use SSH and validate the host key fingerprint!



4. Installation
===============
OTPasswd can easily be configured to work in conjunction with any text-based
PAM-aware application, such as sudo, su, ftp, or any standard *nix console
login.  While it would technically also be possible for OTPasswd to be
used in GUI-based PAM applications, as one might find in the KDE or Gnome
desktops, the necessary GUI layers do not presently exist.  The typical use
case for OTPasswd by far, however, is to secure non-publickey SSH logins,
which is what will be described in this section.

To compile, install, and configure OTPasswd to work with SSH you must
complete the following steps:

   0. Have all required dependencies (with headers)
   1. Install the package
   2. Tweak OTPasswd configuration
   3. Generate a user key (and print at least one passcard)
   4. Enable OTPasswd in /etc/pam.d
   5. Configure SSH to use PAM authentication

Be aware that if OTPasswd is installed over an SSH connection, it is possible
to inadvertently become "locked-out".  This can happen if OTPasswd is enabled
for SSH logins prior to having generated an initial set of passcodes, which
in turn requires the generation of a OTPasswd user key.  The installation
procedure outlined above is intended to minimize the likelihood that this
will happen.

So.

   0. Required Dependencies
   ------------------------
   OTPasswd may be installed either through compilation from source, or
   if available, from a pre-compiled binary package.  Regardless of the
   installation type, OTPasswd requires the GNU Multiple-Precision (GMP)
   library.  Additional packages are required when OTPasswd is compiled
   from source, namely, the CMake cross-platform build system, as well as
   the corresponding -dev packages for both GMP and PAM.  All of these
   packages should be available in your distribution's repositories.

   The following table provides a number of known configurations under
   which OTPasswd is known to compile and run.  This table is not intended
   to be comprehensive, but merely to serve as a point of reference.

      Distribution     Type     Package       Version
      ---------------  -------  ------------  ---------------------
      Ubuntu 8.04 LTS  Runtime  libpam0g      0.99.7.1-5ubuntu6.1
                                libgmp3c2     2:4.2.2+dfsg-1ubuntu2
                       Build    cmake         2.4.7-1build1
                                libpam0g-dev  0.99.7.1-5ubuntu6.1
                                libgmp3-dev   2:4.2.2+dfsg-1ubuntu2

   Future versions of OTPasswd may optionally use MySQL and LDAP.  It is
   also possible that a GNU Autotools build system will eventually either
   replace, or serve as an alternative to CMake.  These options may
   therefore introduce a different set of package dependencies.

   1. Install OTPasswd
   -------------------
   Check to see if a pre-compiled binary package is available for OTPasswd
   in your distribution's package manager.  If so, then install it as you
   would any other package.  Otherwise, you will need to compile OTPasswd
   from source, as follows:

      $ cd otpasswd
      $ cmake .            # Generate makefiles (You can add -DDEBUG=1)
      $ make               # Compile everything
      $ sudo make install  # Install otpasswd into system (as root)

   If you would prefer to perform the final installation step manually,
   then instead of using 'make install' you can copy the following files:

      a) PAM module                       'pam_otpasswd.so' -> /lib/security/
      b) Utility program                         'otpasswd' -> /usr/bin/
      c) Example PAM configuration 'example/otpasswd-login' -> /etc/pam.d/
      d) OTPasswd configuration    'example/otpasswd.conf'  -> /etc/security/

   NOTE: Depending on the DB backend that is being used (see the next
   section), it may be necessary to create a unique system user exclusively
   for OTPasswd, then set the utility program to run as this user through
   use of the SUID flag.  By default, no OTPasswd binaries are SUID.

   **** DO NOT RUN OTPASSWD SUID ROOT ****

   2. Tweak OTPasswd Configuration
   -------------------------------
   OTPasswd is configured via the /etc/otpasswd/otpasswd.conf file.  Upon
   initial installation, this file will contain a template of all valid
   configuration options along with copious commentary.  A pristine version
   of this file should be available in the OTPasswd package documentation
   directory of your system's /usr/share hierarchy.

   The most important configuration setting is the "DB" option.  The DB
   option can be set as follows:

      DB=user
      -------
      In this mode, OTPasswd stores user state information in the user's
      home directory.  As a result, the OTPasswd utility doesn't require
      any SUID privilege, and can be run in the user's security context.
      Note that even if the utility is installed with the SUID flag, it will
      drop privileges immediately after reading the configuration file.
      The major disadvantage of this mode is that since the user has
      complete access to his state file, it is impossible to guarantee all
      aspects of system security policy compliance.  Among other things,
      a user could cause passcode recycling/reuse through manipulation of
      state file information.

      DB=global
      ---------
      This mode uses a system-wide configuration database.  The default
      location for this database is /etc/otpasswd/otshadow.  The database
      file and directory which contains it must be owned by a special
      user created for OTPasswd use, and it MUST not be readable for
      normal users.  Since all critical data is under system control,
      system security policies can be enforced.  However, the OTPasswd
      utility must be granted SUID privilege to the OTPasswd UID to enable
      access to this database on the user's behalf.

      DB=mysql
      --------
      (Not currently implemented) The user state information is stored
      in a MySQL database.  The database access password is stored in the
      OTPasswd configuration file /etc/security/otpasswd.conf, so this file
      must be readable only by the special OTPasswd UID described above.
      The OTPasswd utility must be run with SUID privilege to gain access
      the configuration file, however privileges are dropped promptly
      after reading the file.

      DB=ldap
      -------
      (Not currently implemented) The user state information is stored
      in an LDAP database.  See the DB=mysql description above for more
      information.

   3. Generate OTPasswd Key & Print Passcard
   -----------------------------------------
   To use OTPasswd, a user is required to have a cryptographic key, which
   is then used to generate the user's passcodes.  To generate this key,
   ensure that you are logged in as the user for whom you want to create
   the key, then issue the following command:

      $ otpasswd --key

   An administrator may generate a key for any user, as follows:

      $ otpasswd --key --user tux

   Be aware that OTPasswd, by default, generates a key which is not
   compatible with the PPPv3.1 specification.  If you would like to
   retain compatibility with the specification and thereby also retain
   interoperability with other PPPv3 applications, you can either change
   default behaviour by editing SALT_DEF parameter in the config, or,
   add no-salt flag during key creation as in the following example:

      $ otpasswd --flag no-salt --key

   You can combine also other flags, contact and label parameters like this:

      $ otpasswd -f salt -d Home -f alphabet-2 -f codelength-6 -k

   Note: As mentioned above, if OTPasswd is being configured over an SSH
   session, it is conceivable that one can lose one's ability to log back
   in after any key change since one will not yet have any valid passcodes.
   Because of this, the OTPasswd utility will immediately print a passcard
   upon key generation.  The prudent user would be wise to either print
   this passcard, or minimally jot down the first few passcodes.  You have
   been warned.

   4. Enable OTPasswd in PAM Configuration
   ---------------------------------------
   Previously, the prototype PAM configuration 'example/otpasswd-login'
   was copied to the PAM configuration directory '/etc/pam.d'.  Now,
   to enable OTPasswd use with SSH, one line must be changed in the SSH
   daemon's PAM configuration '/etc/pam.d/sshd', as follows:

      From:
            auth       include        system-remote-login
      to:
            auth       include        otpasswd-login

   Consult the section titled 'About PAM' in the <docs/security> document
   for more detailed information.

   5. Configure SSHD to Use PAM Authentication
   -------------------------------------------
   The OpenSSH daemon's (SSHD) configuration is usually located in the file
   '/etc/ssh/sshd_config'.  Ensure that this file contains the following
   two lines:

      ChallengeResponseAuthentication yes
      UsePAM yes

   It is entirely possible that these two configuration settings are
   already enabled, and that no modification is required.  If the file
   must be modified, it should contain no other uncommented instances of
   either keyword.  Note that it is always advisable to make a backup copy
   of configuration files prior to making any changes.



5. Demo (Screenshot!)
=====================
Everybody loves it, so here is an example of key generation, run by a user
who has previously generated a key, and has also set some optional flags
(3-character long passcodes, extended algorithm):

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   Cirrus ~ % otpasswd -k
   *****************************************************
   * This will irreversibly erase your previous key    *
   * making all already printed passcards worthless!   *
   *****************************************************

   Are you sure you want to continue? (yes/no): yes

   Your current flags: show alphabet-2 (salt) codelength-3
   Do you want to keep them? (yes/no): yes

   Hint: Move your mouse, cause some disc activity
   or type on keyboard to make the progress faster.

   Gathering entropy... OK!

   *****************************************************
   * Print following passcard or at least make a note  *
   * with a few first passcodes so you won't loose     *
   * ability to log into your system!                  *
   *****************************************************

   Cirrus                          [1]
       A   B   C   D   E   F   G   H
    1: ZKU ;R2 k<N Cs@ 8aj K+/ 7U~ een
    2: 35p =k[ oCw Tp' ;sN t4i >v_ R-L
    3: !w, f%T +q~ M_b 9^3 KcA Po& $h<
    4: >vo %(R ak& UF( a|L Y~H A(b zbZ
    5: b,i O|, ?b+ VhS Y6F 95/ {\c %MG
    6: H/^ t_i Dye k3: 3Mq \7y vz[ +Wk
    7: (uU sa3 v\n [%c &5e [mE f"j pq^
    8: Es> ~pa wqo ?C[ !rL Y&O "[4 daT
    9: 'x: eE} YwU q|v eyy yp= ;y7 T\-
   10: At! mFr GCC @dZ _$_ SeB ^4L |_w

   Are you ready to start using one-time passwords? (yes/no): yes

   Key stored!
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Example usage:

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   user@host $ ssh user@cirrus
   Password: <user unix password>
   Passcode B3 [1]: f%T

   user@cirrus $
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



6. Contact Information
======================
You may contact the author with questions, support, praise or curses at
<mailto:bla@thera.be>.  Any feedback will be welcomed (even faint praise).
And no, I don't get a lot of feedback, so don't think "nah, I won't write
anything since he's probably pissed at us anyway".



7. History
==========
The creation of this program was inspired by the ppp-pam project
(http://code.google.com/p/ppp-pam/).  The idea is basically the same.
I started development by contributing to ppp-pam, but there were plenty of
things to fix, and when the author didn't respond (during first month) I
just decided I'd be better off rewriting everything from scratch.  The two
projects share some of my code, like locking functions, but nothing more.
It would be reasonable to think of OTPasswd as a fork of ppp-pam.



8. Licensing
============
This README file, the examples and the source code of the OTPasswd
program are all licensed under GNU General Public License version 3.
The license should be included with the project inside LICENSE file.
Copyright notice follows:

Copyright (C) 2009, 2010 by Tomasz bla Fortuna <bla@thera.be>

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with OTPasswd.  If not, see <http://www.gnu.org/licenses/>.

                                     ###
