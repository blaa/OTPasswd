##
#    OTPasswd - One-Time Password Authentication System
#    --------------------------------------------------
#       https://savannah.nongnu.org/projects/otpasswd
#                Updated: 03-Jan-10 (v0.5pre1)
#
# Configuration of OTPasswd PAM module and key management utility.
#
# File consists of entries in a form:
# VARIABLE=VALUE
# Whitespaces around '=' are not ignored and values musn't be 
# surrounded with " or '. Whitespace after arguments is trimmed.
#
# In general there're two conventions:
# 0 - disabled, 1 - enabled or
# 0 - disallow, 1 - user selectable, 2 - enforced
#
# Most policy affects administrator and user (length of code
# usable alphabet), but some disable options only for user
# (contact/label changing, account disabling).
#
# There are some options which aren't implemented currently.
# They are here so we won't need to break config compatibility soon.
# Those are labeled with "NI!" (Not implemented) abbreviation.
#
##

##
# General configuration
## 

# Select DB (state database) to use. This is the only option
# that MUST be select before OTPasswd will work.
# global:
#   If enabled we store data in global database.
#   This is required for policies to work, yet this option requires 
#   OTPasswd utility to be SUID. 
# user:
#   Keys located in user home directory. Most of policies are not 
#   enforced, no SUID required.
# mysql:
#   Not implemented
# ldap:
#   Not implemented
#
# DB=user

# Full path to the location of global database.
# We must have ownership of the file and write rights
# to the directory. 
# To prevent possible attacks users musn't have write access
# to the containing directory.
DB_GLOBAL=/etc/otpasswd/otshadow

# Name of the file used to keep user keys in their homes. Lock file
# will be created by appending .lck, temporary file by .tmp
# suffix. State copy might be created with .old suffix.
DB_USER=.otpasswd

# Option USER defines a user, the utility will have to be run in certain
# conditions. This option is ignored when DB=user, and should be located
# after DB in config file. 
# In situations when this option is not ignored, utility is
# SUID to either:
# root - (NI!) utility will drop it's privileges to USER as fast as it
#        reads config file. This approach protects utility executable 
#        from being tampered by a successful attacker.
# USER - user which owns config file and /etc/otpasswd directory used
#        to hold user database. This option is then used passively to 
#        make sure SUID is configured correctly.
USER=otpasswd

# MySQL configuration (NI!)
#
# create table state (
#   `username` char(30) PRIMARY KEY,
#   `key` long,
#   `counter` long,
#   `latest_card` long,
#   `flags` int,
#   `codelength` int,
#   `alphabet` int,
#   `spass` char(64),
#   `label` char(30),
#   `contact` char (60),
# 
#   `failures` int,
#   `recent_failures` int,
#   `oob_timestamp` long
# );
SQL_HOST=127.0.0.1
SQL_DATABASE=otpasswd
SQL_USER=otpasswd
SQL_PASS=generate something random and write here

# LDAP configuration (NI!)
LDAP_HOST=127.0.0.1
LDAP_USER=otpasswd
LDAP_PASS=ldap password
LDAP_DN=ou=users,dc=domain,dc=com

##
# PAM Module configuration
##

# How many messages will be logged into syslog by PAM.
# (Utility works on level 1, can be switched into 2 by -v option)
#
# 0 - Nothing will be logged
# 1 - Normal: Errors
# 2 - High: Errors, Warnings (i.e. all authentication tries)
# 3 - Verbose: Errors, Warnings, Notices (-v option to utility)
#     Verbose mode is enabled by "debug" module option.
#     Normal mode can be enabled by passing "audit" option to module.
LOGGING=1

# 0 - Normal
#     User will get additional information on some types of errors during login
#     (like, otp is enforced and he doesn't have generated key.)
# 1 - Silent 
#     Inhibit any not important messages sent to user during authentication
#     (including "last passcard warnings" of PAM session.).
#     Can be also enabled by "silent" module option.
SILENT=0

# If enabled only users who exists in DB will be able to authenticate.
ENFORCE=0

# 0 - Do not retry passcode question
# 1 - retry using next passcode
# 2 - retry asking the same passcode
RETRY=0

# Number of retries (2 to 5)
RETRIES=3

# NI! User can request key regeneration
# with PAM prompt (by entering , instead of passcode)
# The user is then requested a static password which
# he must have set before.
KEY_REGENERATION_PROMPT=0

# NI! After authentication display user a number of failed
# authentication tries.
FAILURE_WARNING=1

# NI! Number of failures after which delay is incremented.
FAILURE_BOUNDARY=3

# NI! Seconds of delay after recent failure count raches FAILURE_BOUNDARY 
FAILURE_DELAY=5

# NI! Require SPASS on each logon (prefixes passcode)
SPASS_REQUIRE=0

##
# 0 - OOB disabled
# 1 - OOB available on user request (by entering '.' on passcode prompt)
# 2 - OOB on request, requires static password prompt
# 3 - Sent OOB at the beginning of all authentication sessions.
##
OOB=0

# Path to OOB script
# This script gets two arguments: User contact field and current
# passcode. Script musn't be SUID, and must be readable/executable by
# user defined in OOB_USER as OTPasswd will drop root privilages in
# order to run it.
OOB_PATH=/etc/otpasswd/otpasswd_oob.sh

# User used to run script (don't set to root!)
OOB_USER=nobody

# NI! Minimum delay in seconds between two consecutive uses of OOB
OOB_DELAY=10

##
# Utility policy configuration
# Works only if user doesn't have direct access to state database himself.
# For example in DB=global.
##

# Can user generate himself a key?
ALLOW_KEY_GENERATION=1

# Can user generate himself a key if he already has one?
ALLOW_KEY_REGENERATION=1

# Can user disable AND enable his state? 
ALLOW_DISABLING=0

# NI! Allow user to specify a (small) file or a string.
# Instead of random data this file will be used to generate
# key (with salted SHA256 hash).
ALLOW_SOURCED_KEY_GENERATION=0

# Allow user to remove his state information
ALLOW_KEY_REMOVAL=1

# Can user print himself any passcodes?
ALLOW_PASSCODE_PRINT=1

# Can user display his key/counter pair?
# Will disable also state export.
ALLOW_KEY_PRINT=1

# Allow user to skip passcodes?
ALLOW_SKIPPING=1

# Can user authenticate on prompt with -a option?
ALLOW_SHELL_AUTH=1

# Allow user to use -v option?
ALLOW_VERBOSE_OUTPUT=1

# NI! Allow ascii state import/export.
ALLOW_STATE_EXPORT=1
ALLOW_STATE_IMPORT=0

# Can user set his contact information?
ALLOW_CONTACT_CHANGE=1

# Can user change label printed on cards?
ALLOW_LABEL_CHANGE=1

##
# Static password (spass)
##

# NI! Allow setting/clearing of spass
SPASS_ALLOW_CHANGE=1

# NI! Minimal length
SPASS_MIN_LENGTH=7
# NI! How many digits to require in spass
SPASS_REQUIRE_DIGIT=1
# NI! How many special characters to require (non-digit, non-alpha)
SPASS_REQUIRE_SPECIAL=1
# NI! How many uppercase alpha characters we require. 
SPASS_REQUIRE_UPPERCASE=1

##
# Set minimal/maximal/default length of passcode.
# Acceptable passcode length is between 2 and 16.
##
PASSCODE_MIN_LENGTH=2
PASSCODE_MAX_LENGTH=16
PASSCODE_DEF_LENGTH=4

##
# Set alphabet parameters
##

# Minimal/Maximal acceptable length of alphabet
ALPHABET_MIN_LENGTH=32
ALPHABET_MAX_LENGTH=88

# Allow alphabet selection
ALPHABET_ALLOW_CHANGE=1

# 0 - Custom alphabet defined in config (by default 0123456789)
# 1 - 64 characters ("PPP standard"):
# !#%+23456789:=?@ABCDEFGHJKLMNPRSTUVWXYZabcdefghijkmnopqrstuvwxyz
# 2 - 88 characters  ("PPP standard"):
# !"#$%&'()*+,-./23456789:;<=>?@ABCDEFGHJKLMNOPRSTUVWXYZ
# [\\]^_abcdefghijkmnopqrstuvwxyz{|}~
# NI! 3 - 54 characters, no vowels:
# !#%+23456789:=?@BCDFGHJKLMNPRSTVWXZbcdfghjkmnpqrstvwxz
# NI! 4 - 78 characters, no vowels:
# !"#$%&'()*+,-./23456789:;<=>?@BCDFGHJKLMNPRSTVWXZ[\\]^_bcdfghjkmnpqrstvwxz{|}~
# NI! 5 - 56 characters, only alphanumeric + digits
# 23456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPRSTUVWXYZ
ALPHABET_DEF=1

# NI! Custom alphabet.
ALPHABET_CUSTOM=0123456789

## Salt parameters
# By default:
# 1 - Use key without salt (PPPv3.1 compatible)
# 2 - Use salted key ("Safer", not compatible)
##
SALT_DEF=1

# Policy configuration:
# 0 - Disallow generation of salt
# 1 - Allow user to use salt
# 2 - Enforce usage of salt
SALT_ALLOW=1


##
# Show flag policy
# 1 - display entered passcodes
# 0 - do not display entered passcodes
##
SHOW_DEF=1

# 0 - Disallow display of passcode
# 1 - Allow user to select option
# 2 - Enforce display of passcode
SHOW_ALLOW=1
